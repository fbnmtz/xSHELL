#!/usr/bin/env bash
#
# ############################################################################
# Project: xSHELL (none)
# File...: scripts/xshell.lib
# Created: Sunday, 2022/02/20 - 18:44:18
# Author.: @fbnmtz, (fabiano.matoz@gmail.com)
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Last Modified: Saturday, 2025/02/08 - 11:52:30
# Modified By..: @fbnmtz, (fabiano.matoz@gmail.com)
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Version: 0.1.14.277
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Description: 
#  >
# ############################################################################
# HISTORY:
#
_xLIB_XSHELL_=true

_DEFAULT_OUTPUT=$HOME/bin

# Function to get author information
get_author_info() {
    local type=$1
    local config_keys=("user.$type" "author.$type")
    local default_value=$USER
    local fallback='<unknown>'

    for key in "${config_keys[@]}"; do
        local value=$(git config --global "$key")
        if [ -n "$value" ]; then
            echo "$value"
            return
        fi
    done

    if [ -n "$default_value" ]; then
        echo "$default_value"
    else
        echo "$fallback"
    fi
}

xshell_init(){
    # set default editor
    editor=$(getPath code micro nano vim neovim ne emacs mcedit tilde atom gedit gvim pico)
    # set default scripts output directory
    [ -z "$output" ] && output=$_DEFAULT_OUTPUT
    [ ! -d "$output" ] && mkdir "$output"

    # Get author name and email
    author_name=$(get_author_info name)
    author_mail=$(get_author_info email)

    # Get current date/time
    today=$(date "+%A, %Y/%m/%d - %H:%M:%S")
}

parse_args(){
    # shellcheck disable=SC2068
    for arg_line in $@; do
        
        for arg_item in ${arg_line//;/ }; do
            
            key=$(echo "$arg_item" | cut -d '=' -f1)
            val=$(echo "$arg_item" | cut -d '=' -f2)

            if [[  "$val" == *"-"* ]]; then
                key='id'
            fi

            case "$key" in
                i | id  ) id_value=$val   ;;
                v | var ) method_value="--var $val"  ;;
                c | code) method_value="--code $val" ;;
                d | desc) desc_value=$val ;;
                *) echo "error parsing arguments!" >>/dev/stderr; exit 2 ;;
            esac
        done
        
        # generate xarg call
        echo "xarg --id $id_value ${method_value//./ } --desc ${desc_value//./ }"
        unset id_value method_value desc_value 
    done
}

# add some iformations to script without our default header
templateInfo(){
    echo -e "
_AUTHOR_=\"$author_name\"
_CREATED_AT_=\"$today\"
_CURRENT_VERSION_=\"0.0.1\""
}

# default header for scripts
templateHeader(){
    # get current date/time (force locale to US format on date)
    export LC_TIME=en_US.UTF-8 2>/dev/null
    # print default header template
    echo -e "#
# ############################################################################
# Project: <project_name>
# File...: $(echo $filename | rev | cut -d '/' -f1 | rev)
# Created: $today
# Author.: $author_name, ($author_mail)
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Last Modified: $today
# Modified By..: $author_name, ($author_mail)
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Version: 0.0.1.0
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Description: 
#  >
# ############################################################################
# HISTORY:
#"
}

# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~
# shellcheck disable=SC1090,SC2154
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~
templateScript(){
    echo -e "
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~
# shellcheck disable=SC1090,SC2154
#   * SC1090: Can't follow non-constant source. Use a directive to specify location.
#       -> cant follow or source usage
#   * SC2154: var is referenced but not assigned.
#       -> variables created by or library system (don't worry)

# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~
source \"\$xSHELL_INIT\"
use args

# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~"
# [ -n "$arguments" ] && \
    # parse_args "$arguments" || \
    echo "# define your arguments with 'xarg' function. Example below:
# xarg --id -s,--sum     --var expression+r          --desc \"expression to sum\"
"

echo "# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~
# initilizae values before xrun (if you need to)

# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~
# arguments will be checked/validated here (use --xhelp arg for more info)
xrun --xreject-unknow --xrequire-one \"\$@\"

# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~
# now put your code below
"
}
# # xrequirements some_binary
# xarg --id -p,--print   --code \"echo 'test prints'\" --desc \"print some code\"
# xarg --id -s,--sum     --var expression+r          --desc \"expression to sum\"

# # xrun function will validate the arguments defined above
# xrun --xreject-unknow --xrequire-one \"\$@\"

# # ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~
# # case \"\$action\" in
# #     version) echo -e \"\${VERSION}\" ;;
# #     help)    echo -e \"action:\$action\"; usage ;;
# # esac

templateLib(){
    # replace '.' for '_'
    local name=${1//./_}
    # remove word 'lib' from filename
    name=${name//lib/}
    # get last character
    local lastchar="$(echo "$name" | rev | cut -c1)"
    # check if it is a 'underscore' character
    [ "${lastchar}" != "_" ]  && name+="_"
    # upcase lib name {^^}
    name=$(upcase $name)
    # const for LIB
    echo -e  "\n_xLIB_${name}=true\n"
}