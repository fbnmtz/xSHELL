#!/usr/bin/env bash
#
# ############################################################################
# Project: xSHELL (none)
# File...: scripts/install
# Created: Friday, 2023/01/06 - 23:38:33
# Author.: @fbnmtz, (fabiano.matoz@gmail.com)
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Last Modified: Saturday, 2025/02/08 - 11:45:20
# Modified By..: @fbnmtz, (fabiano.matoz@gmail.com)
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Version: 0.0.10.229
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Description:
#  >
# ############################################################################
# HISTORY:
#

# Function to require ROOT user
requireROOT() {
    if [ $UID -eq 0 ]; then  # Check if the user is ROOT (UID 0)
        return 0  # Return 0 if the user is ROOT
    else
        echo "Error! You need to be ROOT to install xSHELL"  # Print an error message
        exit 1  # Exit the script with status code 1
    fi
}

# Function to run a command with sudo
_sudo() {
    _cmd_=$1  # Store the command to be run
    echo -n "running 'sudo $_cmd_ '"; echo  # Print the command being run
    eval "$_cmd_"  # Evaluate and run the command
}

# Function to convert a string to uppercase
upcase() {
    echo "$1" | tr '[:lower:]' '[:upper:]'  # Convert the input string to uppercase
}

# URL and repository information
url=https://github.com
repo=fbnmtz/xSHELL
default_dir=/opt

# Prompt the user for the installation directory
echo -n "install xSHELL on directory (default $default_dir): "
read -r custom_path

# Set the installation directory
if [ -z "${custom_path}" ]; then
    install_dir="$default_dir/xSHELL"  # Use the default directory if no custom path is provided
else
    install_dir="${custom_path}/xSHELL"  # Use the custom path if provided
fi

# Check if the installation directory is writable
if [ ! -w "${install_dir}" ]; then
    requireROOT  # Require ROOT user if the directory is not writable
fi

# Check if xSHELL is already installed
if [ -d "$install_dir" ] || [ -L "$install_dir" ]; then
    echo "xSHELL is already installed. Do you want to update it? (y/n)"
    read -r choice
    if [ "$(upcase $choice)" == "Y" ]; then  # Check if the user wants to update
        cd "$install_dir" && git pull  # Update the repository
    fi
else
    git clone "${url}/${repo}" "$install_dir" && echo "xSHELL installed."  # Clone the repository if not already installed
fi

# List of configuration files to check and update
config_files=("/etc/profile" "/etc/bashrc" "/etc/bash.bashrc" "/etc/profile.d/xshell.sh")

# Loop through each configuration file
for config_file in "${config_files[@]}"; do
    # Check if the configuration already exists in the file
    if ! grep -q "export xSHELL_PATH" "$config_file"; then
        # If the configuration does not exist, add it
        _sudo "echo -e '\nexport xSHELL_PATH=\"${install_dir}\"'  >> $config_file"
        _sudo "echo -e '\nexport xSHELL_SCRIPTS=\"\${xSHELL_PATH}/scripts\"'  >> $config_file"
        _sudo "echo -e '\nexport PATH=\"\$PATH:\$xSHELL_PATH:\$xSHELL_SCRIPTS\"' >> $config_file"
        _sudo "echo -e '\nexport xSHELL_INIT=\"\${xSHELL_PATH}/init\"'  >> $config_file"
        _sudo "echo -e '\nxinitialize(){ source \"\${xSHELL_PATH}/init\" ; }'  >> $config_file"
        echo "Configuration added to $config_file"
    else
        echo "Configuration already exists in $config_file"
    fi
done
