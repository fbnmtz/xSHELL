#!/usr/bin/env bash
#
# ############################################################################
# Project: xSHELL (none)
# File...: hashs
# Created: Wednesday, 2021/05/26 - 00:47:46
# Author.: Fabiano Matos, fgm (fabiano.matoz@gmail.com)
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Last Modified: Wednesday, 2025/02/19 - 13:15:50
# Modified By..: @fbnmtz, (fabiano.matoz@gmail.com)
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Version: 1.1.3.84
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Description: 
#  > Implements a virtual Hash inspired on starckoverflow thread
#  >> from: https://stackoverflow.com/a/2225712
#  >> Save keys/values in a temp file on disk for each HASH
# ############################################################################
# HISTORY:
#

_xLIB_HASHS_=true;

xrequirements mkdir cut cat wc grep rm

# Function: Hash.new
#
# Creates a new hash (virtual file-based structure) with the given name.
# The hash is saved as a file in the /tmp/hashs directory.
# If the hash already exists, it will be overwritten.
#
# Parameters:
#   $1: hash_name (string) - The name of the hash to create.
#
# Return:
#   None
Hash.new() {
    # support to temp/persistent hashs
    if [ "$1" == "-t" ]; then
        shift
        _hash_location_=/tmp/hashs/$APP
    else
        _hash_location_=$APP_HOME
    fi
    # Create the directory if it doesn't exist
    mkdir -p "$_hash_location_"

    # Construct the full path to the hash file
    _hash_path_="$_hash_location_/$1.hash"

    # Remove the existing hash file if it exists
    rm -f "$_hash_path_"
}

# Function: Hash.put
# 
# Adds a key-value pair to an existing hash file.
#
# Parameters:
#   $1: hash_name (string) - The name of the hash file to which the key-value pair will be added.
#   $2: key (string) - The key to be added to the hash.
#   $3: value (string) - The value associated with the key.
#
# Return:
#   None
Hash.put() {
    echo "$2:$3" >> "$_hash_location_/$1.hash"
}
alias Hash.add='Hash.put'

# Function to retrieve a value from a hash by its key
#
# This function searches for a key in a hash file and returns the corresponding value.
# The hash file is expected to be in the format: key:value
#
# @param $1 -> The name of the hash file (without the .hash extension)
# @param $2 -> The key to search for in the hash file
# @return -> The value corresponding to the key
Hash.get() {
    # Use grep to find the line that starts with the key followed by a colon
    # Then use cut to extract the value part after the colon
    grep "^$2:" "$_hash_location_/$1.hash" | cut -d ':' -f2
}

# Alias for the Hash.get function
# This allows the function to be called using Hash.val as well
alias Hash.val='Hash.get'

# Function to retrieve all keys from a hash file
#
# This function extracts and returns all keys from a hash file.
# The hash file is expected to be in the format: key:value
#
# @param $1 -> The name of the hash file (without the .hash extension)
# @return -> A list of all keys in the hash file
Hash.keys() {
    # Use cut to extract the first field (keys) from the hash file
    # The delimiter is a colon (:)
    cut -d ':' -f1 < "$_hash_location_/$1.hash"
}

# Function to retrieve all values from a hash file
#
# This function extracts and returns all values from a hash file.
# The hash file is expected to be in the format: key:value
#
# @param $1 -> The name of the hash file (without the .hash extension)
# @return -> A list of all values in the hash file
Hash.values() {
    # Use cut to extract the second field (values) from the hash file
    # The delimiter is a colon (:)
    cut -d ':' -f2 < "$_hash_location_/$1.hash"
}

# Function to retrieve all key-value pairs from a hash file
#
# This function returns all key-value pairs from a hash file.
# The hash file is expected to be in the format: key:value
#
# @param $1 -> The name of the hash file (without the .hash extension)
# @return -> A list of all key-value pairs in the hash file
Hash.all() {
    # Use cat to display the contents of the hash file
    # Redirect any errors to /dev/null to suppress them
    cat "$_hash_location_/$1.hash" 2>/dev/null
}

# Function to count the number of items in a hash file
#
# This function counts and returns the number of key-value pairs in a hash file.
#
# @param $1 -> The name of the hash file (without the .hash extension)
# @return -> The count of key-value pairs in the hash file
Hash.count() {
    # Use Hash.all to get all key-value pairs and pipe the output to wc -l to count the lines
    Hash.all "$1" | wc -l
}

# Function to search for a term in a hash file
#
# This function searches for a term in the key-value pairs of a hash file and returns the matching lines.
#
# @param $1 -> The search term
# @return -> The lines containing the search term
Hash.search() {
    # Use Hash.all to get all key-value pairs and pipe the output to grep to search for the term
    Hash.all "$1" | grep "$*"
}

# Function to search for a value in a hash file
#
# This function searches for a term in the values of a hash file and returns the matching lines.
#
# @param $1 -> The search term
# @return -> The lines containing the search term
Hash.searchVal() {
    # Use Hash.values to get all values and pipe the output to grep to search for the term
    Hash.values "$1" | grep "$*"
}

# Function to add a subhash to an existing hash
#
# This function creates a new subhash and adds it to an existing hash.
#
# @param $1 -> The name of the parent hash file (without the .hash extension)
# @param $2 -> The key to be added to the parent hash
# @param $3 -> The name of the subhash to be created
# @return -> None
Hash.addSubhash() {
    # Create the new subhash
    Hash.new "$3"

    # Add the subhash key to the parent hash
    Hash.put "$1" "$2" "$3"
}

# Function to retrieve a value from a subhash by its key
#
# This function searches for a key in a subhash and returns the corresponding value.
# The subhash file is expected to be in the format: key:value
#
# @param $1 -> The name of the parent hash file (without the .hash extension)
# @param $2 -> The key to search for in the parent hash file
# @param $3 -> The key to search for in the subhash file
# @return -> The value corresponding to the key in the subhash
Hash.getSubhashValue() {
    # Get the name of the subhash
    subhash_name=$(Hash.get "$1" "$2")

    # Use grep to find the line that starts with the key followed by a colon
    # Then use cut to extract the value part after the colon
    grep "^$3:" "$_hash_location_/$subhash_name.hash" | cut -d ':' -f2
}

# Function to add a key-value pair to a subhash
#
# This function adds a key-value pair to an existing subhash.
#
# @param $1 -> The name of the parent hash file (without the .hash extension)
# @param $2 -> The key to search for in the parent hash file
# @param $3 -> The key to be added to the subhash
# @param $4 -> The value associated with the key in the subhash
# @return -> None
Hash.putSubhash() {
    # Get the name of the subhash
    subhash_name=$(Hash.get "$1" "$2")

    # Add the key-value pair to the subhash
    Hash.put "$subhash_name" "$3" "$4"
}

# # Criar um novo hash
# Hash.new myhash

# # Adicionar um subhash ao hash pai
# Hash.addSubhash myhash subhash1 mysubhash

# # Adicionar uma chave-valor ao subhash
# Hash.putSubhash myhash subhash1 key1 value1

# # Recuperar um valor do subhash
# value=$(Hash.getSubhashValue myhash subhash1 key1)
# echo $value