#!/usr/bin/env bash
#
# ############################################################################
# Project: xSHELL (none)
# File...: init
# Created: Thursday, 2021/05/20 - 13:18:34
# Author.: @fbnmtz, fgm (fabiano.matoz@gmail.com)
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Last Modified: Thursday, 2025/02/13 - 22:47:02
# Modified By..: @fbnmtz, (fabiano.matoz@gmail.com)
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Version: 0.1.20.775
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Description: 
#  >
# ############################################################################
# HISTORY:
#

# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# _INIT_DEBUG_=false      # set to true or false to DEBUG

# shellcheck disable=SC1090   #warning on 'source' usage
[ -n "$_INIT_DEBUG_" ] && source "$xSHELL_PATH/colors"   #  autoload 'colors' if in DEBUG mode
  # source /opt/xSHELL/colors   #  autoload 'colors' if in DEBUG mode
  # source ~/bin/xSHELL/colors   #  autoload 'colors' if in DEBUG mode

# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
APP=$(basename "$0")          # application name
# shellcheck disable=SC2034   # unused variable warning
APP_DIR=$(dirname "$0")       # application current directory
APP_HOME="$HOME/.xshell/$APP" # application home (store data)
APP_DATA=$APP_HOME
# DEPRECATED: $APP_DIR will become $APP_HOME and $APP_HOME turn to $APP_DATA

xSHELL_DIRS=( 
  "$APP_DIR/" 
  "$APP_DIR/lib/"
  "$APP_DIR/vendor/"
  "$xSHELL_PATH/"
  "$xSHELL_PATH/lib/" 
  "$xSHELL_PATH/vendor/"
  # "/opt/xSHELL/"
  # "$HOME/bin/xSHELL/"
  # "$HOME/bin/xSHELL/vendor/" 
  # "$HOME/bin/vendor/" 
)

# Função para definir um valor em um array associativo simulado
set_assoc_array() {
    local key=$1
    local value=$2
    eval "_xLIB_DIRS_${key}=\"${value}\""
}

# Função para obter um valor de um array associativo simulado
get_assoc_array() {
    local key=$1
    eval "echo \$_xLIB_DIRS_${key}"
}

# Função para converter uma string para maiúsculas
to_uppercase() {
    echo "$1" | tr '[:lower:]' '[:upper:]'
}

# # Exemplo de uso
# set_assoc_array "lib1" "/path/to/lib1"
# set_assoc_array "lib2" "/path/to/lib2"

# echo "lib1: $(get_assoc_array lib1)"
# echo "lib2: $(get_assoc_array lib2)"

# declare -A _xLIB_DIRS_
_CALLER_=''
_USE_COUNT_=0
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# function to create default $APP_DATA and sub folders
# ex: setHome {dir1, dir2}
xsetHome(){
  APP_DATA=$HOME/.xshell/$APP
  APP_HOME=$APP_DATA
  mkdir -p "$APP_DATA/$*"
}
# import/use some library
# ex: use args utils mycustomlib
use(){
  ((_USE_COUNT_+=1))  # Increment the use counter
  # check if some lib already loaded
  checkLibLoaded(){
    # local lib_const=${1^^}          # convert fist arg to UPCASE 
    lib_const=$(to_uppercase "$1")  # Convert the argument to uppercase
    lib_const=${lib_const//./_}     # replace '.' for '_'
    lib_const=${lib_const//LIB/}    # remove word 'lib' from filename 
    lib_const="_xLIB_${lib_const}"  # Const for mark lib as loaded

    # check last char (needs to be equal '_' underline) 
    [ ! "${lib_const:-1}" == "_" ]  && lib_const+="_"  # Add an underscore if it's not already there

    # check if load lib has a defined var _xLIB_NAME_ and its not null
    if eval "[ -z \"\$${lib_const}\" ]" ; then
      [ "$_INIT_DEBUG_" == 'true' ] && { 
        echo -e "${RED}\`-> lib '${1}' not loaded. (const "\
          "'${BGRED}${BLACK}$lib_const${RESET}${RED}' not found)${RESET}"  # Print an error message if the library is not loaded
      }
      return 1
    else
      [ "$_INIT_DEBUG_" == 'true' ] && {
        echo -e "${YELLOW}\`-> skipping '${1}' -> Lib already loaded. (const '${BGYELLOW}${BLACK}$lib_const${RESET}${YELLOW}' found)${RESET}"  # Print a message if the library is already loaded
      }
      return 0
    fi
  }

  # trackback function caller
  if [ "$_USE_COUNT_" -eq 1 ]; then 
    _CALLER_="$0" ; _LIB_=$1  # Set the caller and library variables
  else
    [ "$_CALLER_" == "$_LIB_" ] && { 
      _CALLER_="$0";
    } || _CALLER_=$_LIB_  # Update the caller and library variables if necessary
  fi
  
  [ "$_INIT_DEBUG_" == 'true' ] && \
    echo -e "call ${YELLOW}'use ${MAGENTA}$*${RESET}' from ${CYAN}'$_CALLER_'${RESET}"  # Print a message indicating that the use function is being called
  
  for lib_file in "$@"; do
    
    if ! checkLibLoaded "$lib_file"; then

      # shellcheck disable=SC2155         # warning - declare and assign separate
      # local current_path=$(dirname "$0")  # Get the directory path of the current script
      # Novo array para armazenar os paths com o arquivo adicionado
      lib_dirs=()

      # Iterar sobre cada item do array original
      for dir in "${xSHELL_DIRS[@]}"; do
        # Adicionar o nome do arquivo ao final do path
        lib_dirs+=("$dir$lib_file")
      done

      local included=''
      
      # search file in default destinations
      local li=0
      for lib in "${lib_dirs[@]}"; do

        if source "${lib}" 2> /dev/null ; then
          _CALLER_=${lib}
          # success? set a flag; break loop
          [ "$_INIT_DEBUG_" == 'true' ] && { 
            # printf "     %-${max_length}s   %s\n" "$key" "$desc"
            
            # printf "   %s\`-> loading '%s' %-25s - directory: %s/%s"  "${GREEN}" "${xSHELL_DIRS[$li]}" "${RESET}" "${CYAN}" "$((li+1))" "${#xSHELL_DIRS[@]}${RESET}"
            
            echo -e "${GREEN}  \`-> loading '${lib}'${RESET} - "\
              "${CYAN}directory: $((li+1))/${#xSHELL_DIRS[@]}${RESET})"
          }
          included="true"
          
          # _xLIB_DIRS_[$lib_file]="${lib}"
          set_assoc_array "${lib_file//./_}" "$lib"

          break
        fi
        li=$((li+1))
      done
    else 
      included="true"
    fi

    # not included with success? raise a error 
    test -z "$included" && { 
      echo -e "\n${RED}Error importing lib '$lib_file' - NOT_FOUND!${RESET}"
      [ "$_INIT_DEBUG_" == 'true' ] && { 
          local all_dirs=${xSHELL_DIRS[*]}
          echo -e "${RED} \`-> searched on dir's:\n   *"\
            "${all_dirs// /\\n   \* }"\
            "${RESET}"
        }
      exit 1
    }
  
  done
  _USE_COUNT_=0
}

# create some aliases for use/import libraries
alias include=use
alias import=use
alias require=use
alias load=use
alias unit=use
alias xuse=use

# validate required binaries
# ex: xrequirements bin1 bin2 bin3A:bin3B
xrequirements(){
  local missing=""
  local found=''
  
  fail(){
    local tools=$@
    local error_msg="requirements error! please install missing tools: '${tools//\|/' or '}'."
    echo -e "$error_msg"
    if source "$xSHELL_PATH/system" 2> /dev/null; then
      xsys.notify "$APP" "$error_msg"
    fi
    exit 10
  }
  # check if a package exists on the system
  # ex| check bin1
  check(){ which "$1" &> /dev/null; }
  
  for tool in $*; do
    if [[ "$tool" =~ "|" ]]; then
      for t in ${tool//\|/ }; do 
        if check "$t"; then
          found=true
          break;
        else
          found=false
          [ -z "$missing" ] && missing+="$tool" || missing+=" $tool"
        fi
      done
      [ "$found" != 'true' ] && fail "$tool"
    else
      if ! check "$tool"; then
        [ -z "$missing" ] && missing+="$tool" || missing+=" $tool"

        fail "$tool"
      else 
        found=true
      fi
    fi
  done

  # [ "$found" != 'true' ] && fail "$missing"
}
