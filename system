#!/usr/bin/env bash
#
# ############################################################################
# Project: xSHELL (none)
# File...: system
# Created: Thursday, 2023/01/05 - 21:11:59
# Author.: @fbnmtz, (fabiano.matoz@gmail.com)
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Last Modified: Tuesday, 2025/02/18 - 00:44:06
# Modified By..: @fbnmtz, (fabiano.matoz@gmail.com)
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Version: 0.0.10.432
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Description: 
#  >
# ############################################################################
# HISTORY:
#

_xLIB_SYSTEM_=true

# declare variables
_OS_=$(uname)
_xSYS_NOTIFY_APP=''
_xSYS_NOTIFY_ARG=''

# return current OS
xsys.os(){   
    echo "${_OS_}"
}

# call system notifyer
xsys.notify(){
    local title="$1" 
    local text="$2" 
    local level="$3";

    # echo -e "\nsys.notify: title: $title; text:$text; level:$level\n";
    
    case $(xsys.os) in
        Darwin) 
            _xSYS_NOTIFY_APP="osascript -e"
            _xSYS_NOTIFY_ARG="\"display notification \\\"<text>\\\" with title \\\"<title>\\\"\""
            _xSYS_NOTIFY_ARG=$(echo -e $_xSYS_NOTIFY_ARG | sed "s/<text>/$text/" | sed "s/<title>/$title/")
        ;;
        Linux)  
            _xSYS_NOTIFY_APP=notify-send
            _xSYS_NOTIFY_ARG="\"$title\" \"$(echo ${text# })\""
            [ "$level" == "-c" ] && _xSYS_NOTIFY_ARG+=' -u critical'

        ;;
    esac
    
    
    if [ -n "$_xLASTUSER_" ] && [ "$_xLASTUSER_" != "$USER" ]; then
        # echo -e '\ncmd: su - "$_xLASTUSER_" -c "xterm -geometry +1+1 -n login -display :0 -e 'bash -c \"$_xSYS_NOTIFY_APP \"$_xSYS_NOTIFY_ARG\"\"\' '
        # su - "$_xLASTUSER_" -c "xterm -geometry +1+1 -n login -display :0 -e 'bash -c \"$_xSYS_NOTIFY_APP \"$_xSYS_NOTIFY_ARG\"; bash\"'"
        su - "$_xLASTUSER_" -c "xterm -geometry +1+1 -n login -display :0 -e 'bash -c \" echo \"$_xSYS_NOTIFY_ARG\" && sleep 10 \"'"
    else
        # echo -e "\ncmd: $_xSYS_NOTIFY_APP $_xSYS_NOTIFY_ARG\n"
        eval "$_xSYS_NOTIFY_APP $_xSYS_NOTIFY_ARG"
    fi
}

# write contents on terminal
xsys.write(){
    echo -e "$@"
}

# manage System volume
xsys.vol(){
    # user param
    action=$1

    # test actions
    [ "$action" == '--up'   ] && action="+"
    [ "$action" == '--down' ] && action="-"
    # ----------------------------------------------------------------
    
    case $(xsys.os) in
        Darwin) 
            # TODO: check how to handle volume via terminal on Mac OS
            _VOL_APP="verificar no macos"
            _VOL_ARG="args do macos"
            # _VOL_ARG=$(echo -e $_VOL_ARG | sed "s/<text>/$text/" | sed "s/<title>/$title/")
        ;;
        Linux)  
            _VOL_APP="amixer"
            _VOL_ARG="-q sset Master 5%$action"
            if [ "$action" == '--status' ] ; then
                 current_volume=$(amixer cget name="Master Playback Volume" | tail -n1 | cut -d '=' -f2 | cut -d ',' -f1)
                _VOL_APP=calcVol
                _VOL_ARG="$current_volume"
            fi
        ;;
    esac
# 
    # echo -e "volume: $($_VOL_APP $_VOL_ARG)"
    eval "$_VOL_APP $_VOL_ARG"
    
}

# calcVol(){
#     local val=$1
#     local max=62259
# #    echo $(( $val/$max*100 ))
# #    echo $(( $val/$max*100 ))
#    echo "$val/$max*100" | bc -l | cut -d '.' -f1
# }

xsys.clipboard(){
    case $(xsys.os) in
        Darwin) 
            _xSYS_CLIP_CMD="pbcopy"
            _xSYS_CLIP_ARG=""
        ;;
        Linux)  
            _xSYS_CLIP_CMD="xclip-cmd"
            _xSYS_CLIP_ARG=""
        ;;
    esac
    eval "$_xSYS_CLIP_CMD $_xSYS_CLIP_ARG"
}

xsys.menu(){
    case $(xsys.os) in
        Darwin) 
            _xSYS_CLIP_CMD="choose"
            _xSYS_CLIP_ARG=""
        ;;
        Linux)  
            _xSYS_CLIP_CMD="rofi"
            _xSYS_CLIP_ARG="-no-config -dmenu -fuzzy -p '$1'"
        ;;
    esac
    eval "$_xSYS_CLIP_CMD $_xSYS_CLIP_ARG"
}

# return the path of a binary (utils getPath)
xsys.path(){
    for tool in "$@"; do
        if which "$tool" &> /dev/null; then
            which "$tool"
            return 0
        fi
    done
    return 1
}

# function to return a basepath from a file
# @param $1 -> file: /etc/hosts
# @return path to file -> /etc
xsys.basepath(){
    xrequirements rev cut
    echo "$1" | rev | cut -d '/' -f2-30 | rev
}