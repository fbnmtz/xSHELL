#!/usr/bin/env bash
#
# ############################################################################
# Project: xSHELL (none)
# File...: utils
# Created: Thursday, 2021/05/20 - 00:26:27
# Author.: Fabiano Matos, fgm (fabiano.matoz@gmail.com)
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Last Modified: Tuesday, 2025/02/18 - 00:35:55
# Modified By..: @fbnmtz, (fabiano.matoz@gmail.com)
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Version: 1.0.11.466
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Description: 
#  >
# ############################################################################
# HISTORY:
#

_xLIB_UTILS_=true;

# using A && B || C
# # running cmds create a block {} and use 'true'; inside.
#     # This will avoid executing the part after || by accident when the code between && and || fails.

# shellcheck disable=SC2120,2015,2016

# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# methods
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
getPath(){
    # DEPRECATED: moved to system as xsys.path
    for tool in "$@"; do
        if which "$tool" &> /dev/null; then
            which "$tool"
            return 0
        fi
    done
    return 1
}


# function to return a basepath from a file
# @param $1 -> file: /etc/hosts
# @return path to file -> /etc
basepath(){
    # DEPRECATED: moved to system as xsys.baspath
    echo "$1" | rev | cut -d '/' -f2-30 | rev
}

# prints a table with supported colors
rainbow(){
    for (( i = 0; i < 8; i++ )); do 
        echo -e "\033[0;3${i}m FG: (0;3$i); \033[1;3${i}m FG-Light: (1;3$i) -> \033[0;4${i}m BG: (0;4$i); \033[1;4${i}m BG-Light: (1;4$i) \033[0m "
    done
}


# ternary operator
# tern "expr" "true value" "false value"
tern(){
    if eval "$1"; then echo "$2"; else echo "$3"; fi
}

# function to check if current user is ROOT 
isROOT?(){
    if [ $UID = 0 ] ; then 
        echo true 
    else
        echo false
    fi
}

# function to require ROOT user
requireROOT(){
    
    _xLASTUSER_=$(last | head -n1 | awk '{print $1}')
    
    if [ $UID = 0 ] ; then 
        return 0 
    else
        echo "Error! You need to be ROOT to run '$APP'."
        exit 1
    fi
}

# print msg with dots
dots() {
    local pad=$(printf "%0.1s" "."{1..60})
    printf " * %s%*.*s" "$1" 0 $((60-${#1})) "$pad"
    return 0
}

# search and return a git config (local or global)
# getGit user.name author.name
getGit(){
    local git_cmd="git config" _git_config
    for c in "$@" ; do
        _git_config=$($git_cmd "$c")
        [ -n "$_git_config" ] && { echo "$_git_config" ; break; }
        _git_config=$($git_cmd --global "$c")
        [ -n "$_git_config" ] && { echo "$_git_config" ; break; }
    done
}